swagger: "2.0"
info:
  version: "0.0.1"
  title: Simple Api
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
# tip: remove http to make production-grade
- http
# - https
# format of bodies a client can send (Content-Type)
consumes:
- application/json
# format of the responses to the client (Accepts)
produces:
- application/json
tags:
- name: 'User'
  description: Operations about Simple Users
- name: 'Authentication'
  description: Authentication operations
- name: 'Card'
  description: Operations about Simple Users cards
- name: 'Transaction'
  description: Operations about Simple Users transactions
- name: 'Tickets'
  description: Operations about Simple tickets
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-Session-ID
paths:
  /user:
    x-swagger-router-controller: user
    post:
      description: Creates a new user
      operationId: createUser
      tags:
      - "User"
      parameters:
      - name: user
        in: body
        description: The user to create
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/CreateUserResponse"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authentication/login:
    x-swagger-router-controller: authentication
    post:
      description: Authenticates a user with a pair of credentials and returns a sessionID
      operationId: login
      tags:
      - "Authentication"
      parameters:
      - name: credentials
        in: body
        description: Credentials to authentication the user with
        required: true
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        200:
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthenticationResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /authentication/logout:
    x-swagger-router-controller: authentication
    get:
      description: Authenticates a user with a pair of credentials and returns a sessionID
      operationId: logout
      tags:
      - "Authentication"
      parameters:
      - name: x-session-id
        in: header
        description: Session ID
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/AuthenticationResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /card:
    x-swagger-router-controller: card
    get:
      description: Get user cards
      operationId: getCards
      tags:
      - "Card"
      security:
      - ApiKeyAuth: []
      responses:
        200:
          description: Success
          schema:
            type: array
            default: []
            items:
              $ref: "#/definitions/CardResponse"
    post:
      description: Create user card
      operationId: createCard
      tags:
      - "Card"
      security:
      - ApiKeyAuth: []
      parameters:
      - name: card
        in: body
        description: The card to create
        required: true
        schema:
          $ref: "#/definitions/Card"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/CreateUserResponse"
        409:
          description: Card already exists!
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /card/{id}:
    x-swagger-router-controller: card
    get:
      description: Get user card
      operationId: getCard
      tags:
      - "Card"
      security:
      - ApiKeyAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CardResponse'
        404:
          description: Card not found!
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete user card
      operationId: deleteCard
      tags:
      - "Card"
      security:
      - ApiKeyAuth: []
      parameters:
      - name: id
        in: path
        description: The card to delete
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        404:
          description: Card not found!
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update user card
      operationId: putCard
      tags:
      - "Card"
      security:
      - ApiKeyAuth: []
      parameters:
      - name: id
        in: path
        description: The card to update
        required: true
        type: string
      - name: card
        in: body
        description: Card new properties
        required: true
        schema:
            $ref: '#/definitions/UpdateCard'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CardResponse'
        404:
          description: Card not found!
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Incorrect card password!
          schema:
            $ref: "#/definitions/ErrorResponse"
  /transaction:
    x-swagger-router-controller: transaction
    get:
      description: Get transactions list
      operationId: getTransactions
      tags:
      - "Transaction"
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /transaction/{id}:
    x-swagger-router-controller: transaction
    get:
      description: Get transaction
      operationId: getTransaction
      tags:
      - "Transaction"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ticket:
    x-swagger-router-controller: ticket
    get:
      description: Get available tickets
      operationId: getAvailableTickets
      tags:
      - "Tickets"
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Ticket"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ticket/{id}:
    x-swagger-router-controller: ticket
    get:
      description: Get available tickets
      operationId: getAvailableTicketDetails
      tags:
      - "Tickets"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Ticket"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ticket/{id}/order:
    x-swagger-router-controller: ticket
    post:
      description: Order ticket
      operationId: orderTicket
      tags:
      - "Tickets"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - name: order
        in: body
        schema:
          $ref: '#/definitions/OrderTicket'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Ticket"
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user-tickets:
    x-swagger-router-controller: ticket
    get:
      description: Get user ordered tickets
      operationId: getUserTickets
      tags:
      - "Tickets"
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderedTicket'
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user-ticket/{orderId}:
    x-swagger-router-controller: ticket
    get:
      description: Get user ordered ticket by orderId
      operationId: getUserTicket
      tags:
      - "Tickets"
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/OrderedTicket'
        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  User:
    required:
    - username
    - password
    - email
    properties:
      username:
        type: string
        example: 'test'
      password:
        type: string
        example: 'test123'
      email:
        type: string
        example: 'test@gm.com'
      full_name:
        type: string
        example: 'Test Elek'
      age:
        type: integer
        example: 25
  CreateUserResponse:
    required:
    - id
    properties:
      id:
        type: string
        example: '123'
  Credentials:
    required:
    - username
    - password
    properties:
      username:
        type: string
        example: 'test'
      password:
        type: string
        example: 'test123'
  AuthenticationResponse:
    required:
    - sessionID
    properties:
      sessionID:
        type: string
        example: 'axd43xs'
  Card:
    required:
    - name
    - password
    - bank_card
    properties:
      name:
        type: string
        example: 'Debit Card'
      password:
        type: string
        example: 'cardPassword'
      limit:
        type: number
        example: 5000
        minimum: 0
        default: 0
        description: 'Password is required if the amount of payment is greater then the given number (0 - means always required)'
      bank_card:
        $ref: '#/definitions/BankCard'
  UpdateCard:
    allOf:
      - $ref: '#/definitions/Card'
      - type: object
        properties:
            newPassword:
              type: string
              example: 'newCardPassword'
              description: 'Provide only if you want to update the password'
  BankCard:
    required:
    - holder_name
    - ccv
    - number
    properties:
      holder_name:
        type: string
        example: 'Test Elek'
      ccv:
        type: string
        example: '100'
      number:
        type: string
        example: '4012888888881881'
  CardsResponse:
    type: object
    required:
    - cards
    properties:
      cards:
        $ref: "#/definitions/CardResponse"
  CardResponse:
    required:
    - id
    - name
    - bank_card
    properties:
      id:
        type: string
        example: '123'
      name:
        type: string
        example: 'Debit Card'
      limit:
        type: number
        example: 5000
        minimum: 0
        default: 0
        description: 'Password is required if the amount of payment is greater then the given number (0 - means always required)'
      bank_card:
        $ref: '#/definitions/BankCardResponse'
  BankCardResponse:
    required:
    - holder_name
    - number
    properties:
      holder_name:
        type: string
        example: 'Test Elek'
      number:
        type: string
        example: '4012888888881881'
  Transaction:
    required:
    - id
    - amount
    - card_id
    properties:
      id:
        type: string
        example: '123'
      amount:
        type: number
        example: 5000
      card_id:
        type: string
        example: '123'
  Ticket:
    required:
    - id
    - name
    - amount
    - available
    properties:
      id:
        type: string
        example: '123'
      name:
        type: string
        example: 'Ticket for Venom Movie'
      amount:
        type: number
        example: 1000
      available:
        type: number
        example: 100
  OrderTicket:
    required:
    - ticket_id
    - amount
    - card_id
    - card_password
    properties:
      ticket_id:
        type: string
        example: '123'
      amount:
        type: number
        example: 5
        description: 'Amount of tickets to buy'
      card_id:
        type: string
        example: '123'
        description: 'Card which the transaction will be processed'
      card_password:
        type: string
        example: 'cardPassword'
        description: 'Password for the card. (Required only when the tickets price is above the card limit)'
  OrderedTicket:
    required:
    - order_id
    - ticket_id
    - amount
    properties:
      order_id:
        type: string
        example: '123'
      ticket_id:
        type: string
        example: '123'
      amount:
        type: number
        example: 5
        description: 'Amount of tickets bought'
  ErrorResponse:
    required:
    - message
    properties:
      message:
        type: string
      code:
        type: string
  SuccessResponse:
    required:
    - success
    properties:
      success:
        type: boolean
      message:
        type: string
